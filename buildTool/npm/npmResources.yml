entryPoint:
  packageJsonConfig:
    - main: <%= entryPoint.entryPoints.main %>

release:
  commitMessageFormat:
    Conventional:
      packages:
        - <<: *pkg_cz-customizable
        - <<: *pkg_commitizen
        - <<: *pkg_ghooks
        - <<: *pkg_cz-customizable-ghooks

      packageJsonConfig:
        - config.commitizen:
            path: node_modules/cz-customizable
        - config.cz-customizable:
            config: <%= paths.config.configDir %>release/commitMessageConfig.js
        - config.ghooks:
            commit-msg: ./node_modules/cz-customizable-ghooks/index.js $2

      templateFiles:
        - src: commitMessageConfig.js
          dest: <%= paths.config.configDir %>release/commitMessageConfig.js
          overwrite: false

      readme:
        buildTask:  # This is a "special" task in that it is designed to appear only in the Readme, not in package.json
          commit:
            commit:
              command: git cz
              description: Commit changes to local repository using Commitizen
              features:
                - Asks questions about the change to generate a valid conventional commit message
                - Can be customised by modifying <%= link(paths.config.configDir + 'release/commitMessageConfig.js') %>

      onInstall:
        - cmd: git    # It is safe to run this multiple times
          args: ['init']

    None:
      packages: []


  repositoryType:
    GitHub:
      semantic:
        packages:
          - <<: *pkg_semantic-release-cli

        tasks:
          - name: release
            tasks: ['build', 'verify', 'test:unit:once']
            description: |
              Create production version of software, verify code, run unit tests. This task is designed to be run before
              the `semantic-release` task.
            features:
              - Run `semantic-release-cli setup` once you have a remote repository. See https://github.com/semantic-release/cli for details
              - Generates release notes against each release in the "Releases" section in GitHub
              - Publishes package to NPM
              - Integrates with Travis CI

      manual:
        tasks:
          - name: release
            tasks: ['build', 'verify', 'test:unit:once']
            description: Create production version of software, verify code, run unit tests.
            features:
              - Define another script-task called `postrelease` to define the rest of your release process

    Other:
      semantic:
        packages:
          - <<: *pkg_corp-semantic-release

        tasks:
          - name: semantic-release
            tasks: ['corp-semantic-release']

          - name: release
            tasks: ['build', 'verify', 'test:unit:once', 'semantic-release']
            description: Create production version of software, verify code, run unit tests then if everything is ok, release the package
            features:
              - Generates `CHANGELOG.md`
              - Bumps `package.json`
              - Tags the changes with the release
              - Requires conventional commit messages to be used

      manual:
        tasks:
          - name: release
            tasks: ['build', 'verify', 'test:unit:once']
            description: Create production version of software, verify code, run unit tests.
            features:
              - Define another script-task called `postrelease` to define the rest of your release process

sampleApp:
  js:
    framework:
      '':
        sourceFormat:
          ES6:
            entryPointFileName: <%= paths.input.srcDir + paths.input.libDir %>demo/index.js
            packages: []
            testPackages: []
            typeLibs: []
            templateFiles:
              - src: noFramework/ES6/*
                dest: <%= paths.input.srcDir + paths.input.libDir %>demo/
                overwrite: true
              - src: noFramework/ES6/unitTest/*
                dest: <%= paths.input.unitTestDir %>
                overwrite: true

testUnit:
  packages:
    - <<: *pkg_mocha
    - <<: *pkg_istanbul

  templateFiles:
    - src: '*'
      dest: <%= paths.config.configDir %>testUnit/
      overwrite: true

  tasks:
    - name: test
      tasks: ['npm run test:unit']
      description: Alias for `npm run test:unit` task
      features: []

    - name: test:unit
      tasks: ['mocha --opts <%= paths.config.configDir %>testUnit/mocha.opts -w']
      description: Run unit tests whenever JS source or tests change
      features:
        - Uses Mocha
        - Code coverage
        - Runs continuously (best to run in a separate window)

    - name: test:unit:once
      # Note the use of "_mocha" instead of "mocha". "_mocha" is the real executable, "mocha" is a wrapper.
      tasks: ['istanbul cover --config <%= paths.config.configDir %>testUnit/istanbul.yml _mocha -- --opts <%= paths.config.configDir %>testUnit/mocha.opts']
      description: Run unit tests once
      features:
        - Uses Mocha
        - Code coverage

    - name: test:coverage
      tasks: ['npm run test:unit:once']
      description: Alias for `npm run test:unit:once`
      features:

    - name: test:check-coverage
      tasks: ['istanbul check-coverage <%= paths.output.reportDir %>/coverage.json --config <%= paths.config.configDir %>testUnit/istanbul.yml']
      description:
      features:

    - name: coverage
      tasks: ['npm-run-all test:coverage test:check-coverage']
      description: Run instrumented unit tests then verify coverage meets defined thresholds
      features:
        - Returns non-zero exit code when coverage does not meet thresholds (as defined in istanbul.yml)
