release:
  commitMessageFormat:
    Conventional:
      packages:
        - <<: *pkg_cz-customizable
        - <<: *pkg_commitizen
        - <<: *pkg_ghooks
        - <<: *pkg_cz-customizable-ghooks

      npmConfig:
        - commitizen:
            path: node_modules/cz-customizable
        - cz-customizable:
            config: <%= paths.config.configDir %>release/commitMessageConfig.js
        - ghooks:
            commit-msg: ./node_modules/cz-customizable-ghooks/index.js $2

      templateFiles:
        - src: commitMessageConfig.js
          dest: <%= paths.config.configDir %>release/commitMessageConfig.js
          overwrite: false

      readme:
        buildTask:  # This is a "special" task in that it is designed to appear only in the Readme, not in package.json
          commit:
            commit:
              command: git cz
              description: Commit changes to local repository using Commitizen
              features:
                - Asks questions about the change to generate a valid conventional commit message
                - Can be customised by modifying <%= link(paths.config.configDir + 'release/commitMessageConfig.js') %>

      onInstall:
        - cmd: git    # It is safe to run this multiple times
          args: ['init']

    None:
      packages: []


  repositoryType:
    GitHub:
      semantic:
        packages:
          - <<: *pkg_semantic-release-cli

        tasks:
          - name: release
            tasks: ['build', 'verify', 'test:unit:once']
            description: |
              Create production version of software, verify code, run unit tests. This task is designed to be run before
              the `semantic-release` task.
            features:
              - Run `semantic-release-cli setup` once you have a remote repository. See https://github.com/semantic-release/cli for details
              - Generates release notes against each release in the "Releases" section in GitHub
              - Publishes package to NPM
              - Integrates with Travis CI

      manual:
        tasks:
          - name: release
            tasks: ['build', 'verify', 'test:unit:once']
            description: Create production version of software, verify code, run unit tests.
            features:
              - Define another script-task called `postrelease` to define the rest of your release process

    Other:
      semantic:
        packages:
          - <<: *pkg_corp-semantic-release

        tasks:
          - name: semantic-release
            tasks: ['corp-semantic-release']

          - name: release
            tasks: ['build', 'verify', 'test:unit:once', 'semantic-release']
            description: Create production version of software, verify code, run unit tests then if everything is ok, release the package
            features:
              - Generates `CHANGELOG.md`
              - Bumps `package.json`
              - Tags the changes with the release
              - Requires conventional commit messages to be used

      manual:
        tasks:
          - name: release
            tasks: ['build', 'verify', 'test:unit:once']
            description: Create production version of software, verify code, run unit tests.
            features:
              - Define another script-task called `postrelease` to define the rest of your release process

sampleApp:
  js:
    framework:
      '':
        sampleDir: noFramework/
        vendorScripts: []
        typeLibs: []
        sourceFormat:
          ES6: {}

testUnit:
  packages:
    - <<: *pkg_karma
    - <<: *pkg_karma-chrome-launcher
    - <<: *pkg_karma-coverage
    - <<: *pkg_karma-jasmine
    - <<: *pkg_karma-junit-reporter
    - <<: *pkg_karma-phantomjs-launcher
    - <<: *pkg_karma-spec-reporter
    - <<: *pkg_karma-threshold-reporter
    - <<: *pkg_jasmine-core
    - <<: *pkg_phantomjs-prebuilt
    - <<: *pkg_phantomjs-polyfill

  tasks:
    - name: test
      tasks: ['npm run test:unit']
      description: Alias for `npm run test:unit` task
      features: []

    - name: test:unit
      tasks: ['karma start ./<%= paths.config.configDir %>testUnit/karma.conf.js']
      description: Run unit tests whenever JS source or tests change
      features:
        - Uses Karma and Jasmine 2
        - Code coverage
        - Runs continuously (best to run in a separate window)

    - name: test:unit:once
      tasks: ['karma start --singleRun=true ./<%= paths.config.configDir %>testUnit/karma.conf.js']
      description: Run unit tests once
      features:

    - name: test:unit:debug
      tasks: ['karma start ./<%= paths.config.configDir %>testUnit/karma.conf.js --debug']
      description: Run unit tests but disable code coverage to make debugging in a browser easier
      features:
        - no code coverage to make it easier to read source code

  templateFiles:
    - src: karma.common.js.tpl
      dest: <%= paths.config.configDir %>testUnit/karma.common.js
      overwrite: true


  readme:
    extensionPoint:
      testUnit: >
        `npm test:unit` can be extended by modifying
        <%= link(paths.config.configDir + 'testUnit/karma.conf.js') %> and <%= link(paths.config.configDir + 'testUnit/karma.common.js') %>.
        <%= link(paths.config.configDir + 'testUnit/test.files.js') %> is generated from the entry points in the Confit configuration.
        It is **best** to modify the entry points in <%= link(configFile) %> then re-run `yo confit`.

        Note that it is possible to run a subset of unit tests by passing a command line argument to Karma, and then modifying the `testFilesRegEx`
        variable in <%= link(paths.config.configDir + 'testUnit/karma.common.js') %> to refer to the command line argument value.
        For example, if the command is `...karma.conf.js --spec=testb`, then `karma.common.js` can access this value through `process.argv.indexOf('--spec=testb')`,
        which can then be used to change the default value of `testFilesRegEx`.
