documentation:

  configModules:
  - packages:
      - <<: *pkg_swanky-server
      - <<: *pkg_swanky-processor-ngdocs
      - <<: *pkg_prismjs
      - <<: *pkg_http-server
      - <<: *pkg_latest-version

    tasks:
      - name: docs:dev
        tasks: ['NODE_ENV=development node <%- paths.config.configDir + resources.documentation.configSubDir %>serve.dev.js']
        description: Creates a development-version of the documentation website and watches for changes.

      - name: docs:build
        tasks: ['NODE_ENV=production webpack -p --progress --config <%- paths.config.configDir + resources.documentation.configSubDir %>swanky.webpack.config.js --colors']
        description: Creates a production-version of the documentation website in the `<%- documentation.outputDir %>`.

      - name: docs:build:serve
        tasks: ['docs:build', 'docs:serve']
        description: Builds then serves (via a web server) the production website.

      - name: docs:serve
        tasks: ['http-server <%- documentation.outputDir %> -o']
        description: Builds then serves (via a web server) the production website.

      - name: docs:prepublish
        tasks: ['node <%- paths.config.configDir + resources.documentation.configSubDir %>prepublish.js']
        description: Updates the information in `swanky.config.yaml` with production settings. This is designed to allow the documentation to be generated AFTER the NPM package has been successfully published.

      - name: docs:postpublish
        tasks: ['node <%- paths.config.configDir + resources.documentation.configSubDir %>postpublish.js']
        description: Updates the information in `swanky.config.yaml` back to the development settings.


    templateFiles:
      - src: config/serve.dev.js.tpl
        dest: <%- paths.config.configDir + resources.documentation.configSubDir %>serve.dev.js
        overwrite: true
      - src: config/swanky.webpack.config.js.tpl
        dest: <%- paths.config.configDir + resources.documentation.configSubDir %>swanky.webpack.config.js
        overwrite: true
      - src: config/prepublish.js.tpl
        dest: <%- paths.config.configDir + resources.documentation.configSubDir %>prepublish.js
        overwrite: true
      - src: config/postpublish.js.tpl
        dest: <%- paths.config.configDir + resources.documentation.configSubDir %>postpublish.js
        overwrite: true
      # Have a single, common Swanky config file which has logic for each framework. This makes it easier to copy
      # entire directory trees but treat this single file as special.
      - src: swanky.config.yaml.tpl
        dest: <%- documentation.srcDir %>/swanky.config.yaml
        overwrite: true

  - condition: <%- documentation.publishMethod === 'manual' %>
    tasks:
      - name: docs:publish
        tasks: ['docs:prepublish', 'docs:build', 'docs:_publish', 'docs:postpublish']
        description: Publishes the documentation manually (edit <%- link(paths.config.configDir + resources.documentation.configSubDir + 'publish.js') %> to provide your implementation)
      - name: docs:_publish
        tasks: ['node <%- paths.config.configDir + resources.documentation.configSubDir %>publish.js']
        description:
    templateFiles:
      - src: config/publish.js.tpl
        dest: <%- paths.config.configDir + resources.documentation.configSubDir %>publish.js
        overwrite: true

  - condition: <%- documentation.publishMethod === 'GitHub' %>
    packages:
      - <<: *pkg_gh-pages
    tasks:
      - name: docs:publish
        tasks: ['docs:prepublish', 'docs:build', 'docs:_publish', 'docs:postpublish']
        description: Publishes the documentation to GitHub's /gh-pages branch
      - name: docs:_publish
        tasks: ['node <%- paths.config.configDir + resources.documentation.configSubDir %>publish.js']
        description:
    templateFiles:
      - src: config/publish.js.tpl
        dest: <%- paths.config.configDir + resources.documentation.configSubDir %>publish.js
        overwrite: true

  - condition: <%- documentation.publishMethod === 'cloud' %>
    packages:
      - <<: *pkg_now
      - <<: *pkg_now-serve
    tasks:
      - name: docs:publish
        tasks: ['docs:prepublish', 'docs:build', 'docs:_publish', 'docs:postpublish']
        description: Publishes the documentation to the cloud using `now`. This will require some setup when using from a CI server.
      - name: docs:_publish
        tasks: ['ns <%- documentation.outputDir %>']
        description:

  - condition: <%- documentation.createSampleDocs %>
    templateFiles:
      - src: docs/**/*
        dest: <%- documentation.srcDir %>
        overwrite: true
        noParse: true

  - condition: <%- buildJS.framework.indexOf('AngularJS 1.x') > -1 %>
    templateFiles:
      - src: ng1/docs/**/*
        dest: <%- documentation.srcDir %>
        overwrite: true
        noParse: true

entryPoint:
  packageJsonConfig:
    - main: <%- entryPoint.entryPoints.main[0] %>


release:
  configModules:
    - condition: <%- release.commitMessageFormat === 'Conventional' %>
      packages:
        - <<: *pkg_cz-customizable
        - <<: *pkg_commitizen
        - <<: *pkg_ghooks
        - <<: *pkg_cz-customizable-ghooks
      packageJsonConfig:
        - config.commitizen.path: node_modules/cz-customizable
        - config.cz-customizable.config: <%- paths.config.configDir + resources.release.configSubDir %>commitMessageConfig.js
        - config.ghooks.commit-msg: ./node_modules/cz-customizable-ghooks/lib/index.js $2
      templateFiles:
        - src: commitMessageConfig.js
          dest: <%- paths.config.configDir + resources.release.configSubDir %>commitMessageConfig.js
          overwrite: false
      readme:
        buildTask:  # This is a "special" task in that it is designed to appear only in the Readme, not in package.json
          commit:
            commit:
              command: git cz
              description: Commit changes to local repository using Commitizen
              features:
                - Asks questions about the change to generate a valid conventional commit message
                - Can be customised by modifying <%- link(paths.config.configDir + resources.release.configSubDir + 'commitMessageConfig.js') %>
      onInstall:
        - cmd: git    # It is safe to run this multiple times
          args: ['init']

    - condition: <%- app.repositoryType === 'GitHub' && release.useSemantic %>
      packages:
        - <<: *pkg_semantic-release-cli
      tasks:
        - name: pre-release
          tasks: ['verify', 'test:coverage', 'build', '<% if (config.testSystem) { %>test:system<% }%>']
          description: |
            Verify code, run unit tests, check test coverage, build software. This task is designed to be run before
            the `semantic-release` task.
          features:
            - Run `semantic-release-cli setup` once you have a remote repository. See https://github.com/semantic-release/cli for details.
            - |
              Semantic-release integrates with Travis CI (or similar tools) to generate release notes
              for each release (which appears in the "Releases" section in GitHub) and
              publishes the package to NPM (when all the tests are successful) with a semantic version number.

    - condition: <%- app.repositoryType === 'GitHub' && !release.useSemantic %>
      tasks:
        - name: pre-release
          tasks: ['verify', 'test:coverage', 'build', '<% if (config.testSystem) { %>test:system<% }%>']
          description: Verify code, run unit tests, check test coverage, build software.
          features:
            - Define another script-task called `postrelease` to define the rest of your release process

    - condition: <%- app.repositoryType === 'Other' && release.useSemantic %>
      packages:
        - <<: *pkg_corp-semantic-release
      tasks:
        - name: semantic-release
          tasks: ['corp-semantic-release']

        - name: release
          tasks: ['verify', 'test:coverage', 'build', '<% if (config.testSystem) { %>test:system<% }%>', 'semantic-release']
          description: Create production version of software, verify code, run unit tests then if everything is ok, release the package
          features:
            - Generates `CHANGELOG.md`
            - Bumps `package.json`
            - Tags the changes with the release
            - Requires conventional commit messages to be used

    - condition: <%- app.repositoryType === 'Other' && !release.useSemantic %>
      tasks:
        - name: release
          tasks: ['verify', 'test:coverage', 'build', '<% if (config.testSystem) { %>test:system<% }%>']
          description: Create production version of software, verify code, run unit tests.
          features:
            - Define another script-task called `postrelease` to define the rest of your release process

sampleApp:
  js:
    framework:
      '':
        sourceFormat:
          ES6:
            entryPointFileName: <%- paths.input.srcDir + resources.sampleApp.demoDir %>index.js
            packages: []
            testPackages: []
            typeLibs: []
            templateFiles:
              - src: noFramework/ES6/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir %>
                overwrite: true
              - src: noFramework/ES6/unitTest/*
                dest: <%- paths.input.unitTestDir %>
                overwrite: true

serverProd:
  packages:
    - <<: *pkg_serve-https
    - <<: *pkg_serve

  tasks:
    - name: serve:prod
      tasks: ["<%- (config.serverProd && config.serverProd.protocol === 'https') ? 'npm run serve:prod:https' : 'npm run serve:prod:http' -%>"]
      description: <% if (config.serverProd) { %>Runs a production server on **<%= config.serverProd.protocol + '://' + config.serverProd.hostname + ':' + config.serverProd.port %>**<% } -%>
      features:
        - HTTP or HTTPS

    - name: serve:prod:https
      tasks: ["<% if (config.serverProd) { %><%- 'serve-https -p ' + serverProd.port + ' -d ' + paths.output.prodDir + ' --servername ' + serverProd.hostname -%><% } -%>"]

    - name: serve:prod:http
      tasks: ["<% if (config.serverProd) { %><%- 'serve -C -p ' + serverProd.port + ' ' + paths.output.prodDir -%><% } -%>"]


testUnit:
  packages:
    - <<: *pkg_chokidar-cli
    - <<: *pkg_mocha
    - <<: *pkg_istanbul

  templateFiles:
    - src: '*'
      dest: <%- paths.config.configDir + resources.testUnit.configSubDir %>
      overwrite: true

  tasks:
    - name: test
      tasks: ['npm run test:unit']
      description: Alias for `npm run test:unit` task
      features: []

    - name: test:unit
      tasks:
        - >
          <%
            var jsExtensions = resources.buildJS.sourceFormat[buildJS.sourceFormat].ext;
            var testWatchPaths = [paths.input.srcDir + '**/*.', paths.input.unitTestDir + '**/*.'];
            var completeTestPaths = [];
            testWatchPaths.forEach(function(path) {
              jsExtensions.forEach(function(ext) {
                completeTestPaths.push(path + ext);
              });
            });
          -%>chokidar '<%- completeTestPaths.join('\' \'') -%>' -c 'npm run test:unit:once' --initial --silent<% -%>
      description: Run unit tests whenever JS source or tests change
      features:
        - Uses Mocha
        - Code coverage
        - Runs continuously (best to run in a separate window)

    - name: test:unit:once
      # Note the use of "_mocha" instead of "mocha". "_mocha" is the real executable, "mocha" is a wrapper.
      tasks: ['istanbul cover --config <%- paths.config.configDir + resources.testUnit.configSubDir %>istanbul.yml _mocha -- --opts <%- paths.config.configDir + resources.testUnit.configSubDir %>mocha.opts']
      description: Run unit tests once
      features:
        - Uses Mocha
        - Code coverage

    - name: test:check-coverage
      tasks: ['istanbul check-coverage <%- paths.output.reportDir %>coverage.json --config <%- paths.config.configDir + resources.testUnit.configSubDir %>istanbul.yml']
      description:
      features:

    - name: test:coverage
      tasks: ['npm-run-all test:unit:once test:check-coverage --silent']
      description: Run instrumented unit tests then verify coverage meets defined thresholds
      features:
        - Returns non-zero exit code when coverage does not meet thresholds (as defined in istanbul.yml)

testVisualRegression:
  # Only do this if visual regression is enabled
  condition: <%- config.testVisualRegression && config.testVisualRegression.enabled %>

  packages:
    - <<: *pkg_backstopjs
    - <<: *pkg_glob

  tasks:
    - name: test:visual
      tasks: ['cd node_modules/backstopjs && npm run test -- --configPath=../../<%= paths.config.configDir + resources.testVisualRegression.configSubDir %>backstop.config.js']
      description: Run visual regression tests against the *development* web server (the development server **must** be running)
      features:
        - "<% if (config.testVisualRegression) { %>You can create visual regression tests by placing them in the `<%- testVisualRegression.moduleTestDir %>` folder inside any of your module folders (e.g. `<%- paths.input.srcDir + resources.sampleApp.demoDir + testVisualRegression.moduleTestDir %>`)<% } %>"
        - "Example scenario:<pre>module.exports = {<br>  label: 'My Homepage',<br>  url: '/',<br>  selectors: ['header', 'footer']<br>};</pre>"

    - name: test:visual:ref
      tasks: ['cd node_modules/backstopjs && npm run reference -- --configPath=../../<%= paths.config.configDir + resources.testVisualRegression.configSubDir %>backstop.config.js']
      description: Creates visual regression testing reference images which are subsequently used as the baseline for future tests. The development server **must** be running.
      features: []

  templateFiles:
    - src: backstop.config.js.tpl
      dest: <%= paths.config.configDir + resources.testVisualRegression.configSubDir %>backstop.config.js
      overwrite: true

verify:
  # Common packages
  packages:
    - <<: *pkg_chokidar-cli

  tasks:
    - name: verify
      tasks:  # "--silent" makes it easier to see program errors
        - >
          <% var verifyCmd = (resources.verify.verifyTasks.length > 1 ? 'npm-run-all ' : 'npm run ') + resources.verify.verifyTasks.join(' ');
          -%><%- verifyCmd -%> --silent<% -%>
      description: Verify code style and syntax
      features:
        - Verifies source *and test code* aginst customisable rules (unlike Webpack loaders)

    - name: verify:watch
      tasks:
        - >
          <% var verifyWatchTasks = resources.verify.verifyTasks.map(taskName => taskName + ':watch');
             var verifyCmdWatch = (verifyWatchTasks.length > 1 ? 'npm-run-all --parallel ' : 'npm run ') + verifyWatchTasks.join(' ');
          -%><%- verifyCmdWatch -%> --silent<% -%>
      description: Runs verify task whenever JS or CSS code is changed
      features: []

  configModules:
    - condition: <%- ['none', 'AirBnB', 'ESLint', 'Google', 'StandardJS'].indexOf(verify.jsCodingStandard) > -1 %>
      tasks:
        - name: verify:js
          tasks:
            - >
              <%
                var jsExtensions = resources.buildJS.sourceFormat[buildJS.sourceFormat].ext;
                var jsSourcePaths = [paths.input.srcDir + '**/*.', paths.input.unitTestDir + '**/*.', paths.config.configDir + '**/*.'];
                var completeJSPaths = [];
                jsSourcePaths.forEach(function(path) {
                  jsExtensions.forEach(function(ext) {
                    completeJSPaths.push(path + ext);
                  });
                });
              -%>eslint -c <%- paths.config.configDir + resources.verify.configSubDir %>.eslintrc "<%- completeJSPaths.join('" "') -%>"<%- onSuccessCmd('verify:js success') -%>
          description: Verify Javascript code style and syntax
        - name: verify:js:fix
          tasks:
            - >
              <%
                var jsExtensions = resources.buildJS.sourceFormat[buildJS.sourceFormat].ext;
                var jsSourcePaths = [paths.input.srcDir + '**/*.', paths.input.unitTestDir + '**/*.', paths.config.configDir + '**/*.'];
                var completeJSPaths = [];
                jsSourcePaths.forEach(function(path) {
                  jsExtensions.forEach(function(ext) {
                    completeJSPaths.push(path + ext);
                  });
                });
              -%>eslint --fix -c <%- paths.config.configDir + resources.verify.configSubDir %>.eslintrc "<%- completeJSPaths.join('" "') -%>"<%- onSuccessCmd('verify:js:fix success') -%>
          description: Verify Javascript code style and syntax and fix any errors that can be fixed automatically
        - name: verify:js:watch
          tasks:
            - >
              <%
                var jsExtensions = resources.buildJS.sourceFormat[buildJS.sourceFormat].ext;
                var jsSourcePaths = [paths.input.srcDir + '**/*.', paths.input.unitTestDir + '**/*.', paths.config.configDir + '**/*.'];
                var completeJSPaths = [];
                jsSourcePaths.forEach(function(path) {
                  jsExtensions.forEach(function(ext) {
                    completeJSPaths.push(path + ext);
                  });
                });
              -%>chokidar '<%- completeJSPaths.join('\' \'') -%>' -c 'npm run verify:js:fix' --initial --silent<% -%>
          description: Verify Javascript code style and syntax and watch files for changes

    - condition: <%- ['TypeScript'].indexOf(verify.jsCodingStandard) > -1 %>
      tasks:
        - name: verify:js
          tasks:
            - >
              <%
                var jsExtensions = resources.buildJS.sourceFormat[buildJS.sourceFormat].ext;
                var jsSourcePaths = [paths.input.srcDir + '**/*.', paths.input.unitTestDir + '**/*.', paths.config.configDir + '**/*.'];
                var completeJSPaths = [];
                jsSourcePaths.forEach(function(path) {
                  jsExtensions.forEach(function(ext) {
                    completeJSPaths.push(path + ext);
                  });
                });
              %>tslint -c <%- paths.config.configDir + resources.verify.configSubDir %>tslint.json "<%- completeJSPaths.join('" "') -%>"<%- onSuccessCmd('verify:js success') -%>
          description: Verify Typescript code style and syntax
        - name: verify:js:watch
          tasks:
            - >
              <%
                var jsExtensions = resources.buildJS.sourceFormat[buildJS.sourceFormat].ext;
                var jsSourcePaths = [paths.input.srcDir + '**/*.', paths.input.unitTestDir + '**/*.', paths.config.configDir + '**/*.'];
                var completeJSPaths = [];
                jsSourcePaths.forEach(function(path) {
                  jsExtensions.forEach(function(ext) {
                    completeJSPaths.push(path + ext);
                  });
                });
              %>chokidar '<%- completeJSPaths.join('\' \'') -%>' -c 'npm run verify:js' --initial --silent<% -%>
          description: Verify Typescript code style and syntax and watch files for changes

    - condition: <%- config.buildCSS && buildCSS.sourceFormat === 'css' %>
      tasks: # dummy tasks to preserve task interface
        - name: verify:css
          tasks:
            - echo <%- onSuccessCmd('verify:css success') -%>
        - name: verify:css:watch
          tasks:
            - echo <%- onSuccessCmd('verify:css success') -%>

    - condition: <%- config.buildCSS && buildCSS.sourceFormat === 'sass' %>
      packages:
        - <<: *pkg_sass-lint
      tasks:
        - name: verify:css
          tasks:
            - sass-lint -c <%- paths.config.configDir + resources.verify.configSubDir %>sasslint.yml --verbose<%- onSuccessCmd('verify:css success') -%>
          description: Verify CSS code style and syntax
        - name: verify:css:watch
          tasks:
            - >
              <%
                var hasCSSConfig = !!resources.buildCSS && buildCSS.sourceFormat;
                if (hasCSSConfig) {
                  var cssExtensions = resources.buildCSS.sourceFormat[buildCSS.sourceFormat].ext;
                  var cssSourcePaths = [paths.input.srcDir + '**/*.'];
                  var completeCSSPaths = [];
                  cssSourcePaths.forEach(function(path) {
                    cssExtensions.forEach(function(ext) {
                      completeCSSPaths.push(path + ext);
                    });
                  });
              %>chokidar '<%- completeCSSPaths.join('\' \'') -%>' -c 'npm run verify:css' --initial --silent<% } -%>
          description: Verify CSS code style and syntax and watch files for changes

    - condition: <%- config.buildCSS && buildCSS.sourceFormat === 'stylus' %>
      packages:
        - <<: *pkg_stylint
      tasks:
        - name: verify:css
          tasks:
            - stylint -c <%- paths.config.configDir + resources.verify.configSubDir %>.stylintrc <%- paths.input.srcDir -%><%- onSuccessCmd('verify:css success') -%>
          description: Verify CSS code style and syntax
        - name: verify:css:watch
          tasks:
            - >
              <%
                var hasCSSConfig = !!resources.buildCSS && buildCSS.sourceFormat;
                if (hasCSSConfig) {
                  var cssExtensions = resources.buildCSS.sourceFormat[buildCSS.sourceFormat].ext;
                  var cssSourcePaths = [paths.input.srcDir + '**/*.'];
                  var completeCSSPaths = [];
                  cssSourcePaths.forEach(function(path) {
                    cssExtensions.forEach(function(ext) {
                      completeCSSPaths.push(path + ext);
                    });
                  });
              %>chokidar '<%- completeCSSPaths.join('\' \'') -%>' -c 'npm run verify:css' --initial --silent<% } -%>
          description: Verify CSS code style and syntax and watch files for changes
