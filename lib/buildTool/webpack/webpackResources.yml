buildBrowser:
  packages:
    - <<: *pkg_webpack
    - <<: *pkg_webpack-dev-server
    - <<: *pkg_lodash   # Used by the webpack-dev-server

  tasks:
    - name: build:dev
      tasks: ['webpack-dev-server --progress --config <%= paths.config.configDir %>webpack/dev.webpack.config.js --hot']
      description: Create a development build using Webpack
      features:
        - Sourcemaps
        - Hot reloading of source code

    - name: build:prod
      tasks: ['webpack -p --progress --config <%= paths.config.configDir %>webpack/prod.webpack.config.js']
      description: Create a production build using Webpack
      features:
        - Minifies source code
        - Sourcemaps
        - Dead code removal
        - Hashes added to file names for cache-busting


buildAssets:
  packages:
    - <<: *pkg_file-loader

buildCSS:
  # Common packages
  packages:
    - <<: *pkg_css-loader
    - <<: *pkg_style-loader
    - <<: *pkg_autoprefixer
    - <<: *pkg_postcss-loader

  sourceFormat:
    css:
      packages: []

    stylus:
      packages:
        - <<: *pkg_stylus
        - <<: *pkg_stylus-loader

    sass:
      packages:
        - <<: *pkg_sass-loader
        - <<: *pkg_node-sass

buildHTML:
  packages:
    - <<: *pkg_html-loader
    - <<: *pkg_html-webpack-plugin

buildJS:
  sourceFormat:
    ES6:
      packages:
        - <<: *pkg_babel-core
        - <<: *pkg_babel-runtime
        - <<: *pkg_babel-loader
        - <<: *pkg_babel-preset-es2015
        - <<: *pkg_babel-plugin-add-module-exports    # Adds export for the "default" export: module.exports = exports['default']; See http://stackoverflow.com/questions/34736771/webpack-umd-library-return-object-default/34778391#34778391

    ES5:
      packages: []

    TypeScript:
      packages:
        - <<: *pkg_awesome-typescript-loader

      typeLibs:
        - name: webpack
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/webpack/webpack.d.ts#95c02169ba8fa58ac1092422efbd2e3174a206f4


# sampleApp configuration
sampleApp:
  js:
    framework:
      '':
        sourceFormat:
          ES6:
            entryPointFileName: ./<%- resources.sampleApp.demoDir %>app.js
            packages: []
            testPackages: []
            typeLibs: []
            templateFiles:
              - src: noFramework/ES6/*
                dest: <%= paths.input.srcDir %>
                overwrite: true
                noParse: true
              - src: noFramework/ES6/demoModule/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir %>
                overwrite: true
              - src: noFramework/ES6/demoModule/unitTest/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.unitTestDir %>
                overwrite: true
              - src: noFramework/ES6/demoModule/templates/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.templateDir %>
                overwrite: true

          TypeScript:
            entryPointFileName: ./<%- resources.sampleApp.demoDir %>app.ts
            packages: []
            testPackages: []
            typeLibs: []
            templateFiles:
              - src: noFramework/TypeScript/*
                dest: <%= paths.input.srcDir %>
                overwrite: true
                noParse: true
              - src: noFramework/TypeScript/demoModule/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir %>
                overwrite: true
              - src: noFramework/TypeScript/demoModule/unitTest/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.unitTestDir %>
                overwrite: true
              - src: noFramework/TypeScript/demoModule/templates/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.templateDir %>
                overwrite: true


      AngularJS 1.x:
        sourceFormat:
          ES6:
            entryPointFileName: ./<%- resources.sampleApp.demoDir %>app.js
            packages:
              - <<: *pkg_angular-route
            testPackages:
              - <<: *pkg_angular-route
            typeLibs: []
            templateFiles:
              - src: ng1/ES6/*
                dest: <%= paths.input.srcDir %>
                overwrite: true
                noParse: true
              - src: ng1/ES6/demoModule/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir %>
                overwrite: true
              - src: ng1/ES6/demoModule/unitTest/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.unitTestDir %>
                overwrite: true
              - src: ng1/ES6/demoModule/templates/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.templateDir %>
                overwrite: true

          TypeScript:
            entryPointFileName: ./<%- resources.sampleApp.demoDir %>app.ts
            packages:
              - <<: *pkg_angular-route
            testPackages:
              - <<: *pkg_angular-route
            typeLibs:
              - name: angular-route
                key: ambientDependencies
                version: github:DefinitelyTyped/DefinitelyTyped/angularjs/angular-route.d.ts#cf172aab99c3139a718aa8e65398a22c53dd7ead
            templateFiles:
              - src: ng1/TypeScript/*
                dest: <%= paths.input.srcDir %>
                overwrite: true
                noParse: true
              - src: ng1/TypeScript/demoModule/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir %>
                overwrite: true
              - src: ng1/TypeScript/demoModule/unitTest/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.unitTestDir %>
                overwrite: true
              - src: ng1/TypeScript/demoModule/templates/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.templateDir %>
                overwrite: true

      AngularJS 2.x:
        sourceFormat:
          ES6:
            entryPointFileName: ./<%- resources.sampleApp.demoDir %>app.js
            packages:
              - <<: *pkg_angular2/router
            testPackages: []
            typeLibs: []
            templateFiles:
              - src: ng2/ES6/*
                dest: <%= paths.input.srcDir %>
                overwrite: true
                noParse: true
              - src: ng2/ES6/demoModule/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir %>
                overwrite: true
              - src: ng2/ES6/demoModule/unitTest/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.unitTestDir %>
                overwrite: true
              - src: ng2/ES6/demoModule/templates/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.templateDir %>
                overwrite: true

          TypeScript:
            entryPointFileName: ./<%- resources.sampleApp.demoDir %>app.ts
            packages:
              - <<: *pkg_angular2/router
            testPackages: []
            typeLibs: []
            templateFiles:
              - src: ng2/TypeScript/*
                dest: <%= paths.input.srcDir %>
                overwrite: true
                noParse: true
              - src: ng2/TypeScript/demoModule/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir %>
                overwrite: true
              - src: ng2/TypeScript/demoModule/unitTest/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.unitTestDir %>
                overwrite: true
              - src: ng2/TypeScript/demoModule/templates/*
                dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.templateDir %>
                overwrite: true

            testUnitConfig: |
              // Load Angular 2's Jasmine helper methods:
              var testing = require('angular2/testing');
              var browser = require('angular2/platform/testing/browser');

              testing.setBaseTestProviders(
                browser.TEST_BROWSER_PLATFORM_PROVIDERS,
                browser.TEST_BROWSER_APPLICATION_PROVIDERS
              );

              Object.assign(global, testing);
            vendorScripts:  # Add these items to the vendor scripts entryPoint
              pre:
                - './polyfills.ts'
              post: []

      React (latest):
        sourceFormat: {}

serverDev:
  packages: []

  tasks:
    - name: serve:dev
      tasks: ['echo Starting DEV server']
      description: Runs a dev server using `webpack-dev-server` on **<%= serverDev.protocol + '://' + serverDev.hostname + ':' + serverDev.port %>**
      features:
        - HTTP or HTTPS
        - LiveReload support for HTML & CSS
        - Hot module reloading

testUnit:
  # Use different coverage loaders for TypeScript as there currently isn't a loader that understands TypeScript natively?
  sourceFormat:
    ES5:
      loaderType: preLoaders
      loaderName: isparta-instrumenter-loader
      packages:
        - <<: *pkg_isparta-instrumenter-loader

    ES6:
      loaderType: preLoaders
      loaderName: isparta-instrumenter-loader
      query:
        babel:
          presets: ['es2015']
      packages:
        - <<: *pkg_isparta-instrumenter-loader

    TypeScript:
      loaderType: postLoaders
      loaderName: istanbul-instrumenter-loader
      packages:
        - <<: *pkg_istanbul-instrumenter-loader

  packages:
    - <<: *pkg_karma
    - <<: *pkg_karma-chrome-launcher
    - <<: *pkg_karma-coverage
    - <<: *pkg_karma-jasmine
    - <<: *pkg_karma-junit-reporter
    - <<: *pkg_karma-ng-html2js-preprocessor   # TODO: Shouldn't this be conditional? Or is it even needed with Webpack, if you require() HTML templates?
    - <<: *pkg_karma-phantomjs-launcher
    - <<: *pkg_karma-sourcemap-loader
    - <<: *pkg_karma-threshold-reporter
    - <<: *pkg_karma-webpack
    - <<: *pkg_jasmine-core
    - <<: *pkg_phantomjs-prebuilt
    - <<: *pkg_phantomjs-polyfill

  tasks:
    - name: test
      tasks: ['npm run test:unit']
      description: Alias for `npm run test:unit` task
      features: []

    - name: test:unit
      tasks: ['karma start ./<%= paths.config.configDir %>testUnit/karma.conf.js']
      description: Run unit tests whenever JS source or tests change
      features:
        - Uses Karma and Jasmine 2
        - Code coverage
        - Runs continuously (best to run in a separate window)

    - name: test:unit:once
      tasks: ['karma start --singleRun=true ./<%= paths.config.configDir %>testUnit/karma.conf.js']
      description: Run unit tests once
      features:
        - Tests are run a single time
        - Good command for continuous integration testing

    - name: test:unit:debug
      tasks: ['karma start ./<%= paths.config.configDir %>testUnit/karma.conf.js --debug']
      description: Run unit tests but disable code coverage to make debugging in a browser easier
      features:
        - Runs continuously (best to run in a separate window)
        - No code coverage to make it easier to read source & testcode

    - name: test:coverage   # Used by the pre-release / release task
      tasks: ['npm run test:unit:once']
      description: Alias for test:unit:once, which also does test coverage checks and will fail if test coverage is not sufficient

  typeLibs:
    - name: jasmine
      key: ambientDependencies
      version: github:DefinitelyTyped/DefinitelyTyped/jasmine/jasmine.d.ts#4b36b94d5910aa8a4d20bdcd5bd1f9ae6ad18d3c

  templateFiles:
    - src: karma.conf.js.tpl
      dest: <%= paths.config.configDir %>testUnit/karma.conf.js
      overwrite: true

    - src: karma.common.js.tpl
      dest: <%= paths.config.configDir %>testUnit/karma.common.js
      overwrite: true

    - src: test.files.js.tpl
      dest: <%= paths.config.configDir %>testUnit/test.files.js
      overwrite: true


  readme:
    extensionPoint:
      testUnit: >
        `npm test:unit` can be extended by modifying
        <%= link(paths.config.configDir + 'testUnit/karma.conf.js') %> and <%= link(paths.config.configDir + 'testUnit/karma.common.js') %>.
        <%= link(paths.config.configDir + 'testUnit/test.files.js') %> is generated from the entry points in the Confit configuration.
        It is **best** to modify the entry points in <%= link(configFile) %> then re-run `yo confit`.

        Note that it is possible to run a subset of unit tests by passing a command line argument to Karma, and then modifying the `testFilesRegEx`
        variable in <%= link(paths.config.configDir + 'testUnit/karma.common.js') %> to refer to the command line argument value.
        For example, if the command is `...karma.conf.js --spec=testb`, then `karma.common.js` can access this value through `process.argv.indexOf('--spec=testb')`,
        which can then be used to change the default value of `testFilesRegEx`.

zzfinish:
  packages:
    - <<: *pkg_extract-text-webpack-plugin

  templateFiles:
    - src: webpack.config.js.tpl
      dest: <%= paths.config.configDir %>webpack/webpack.config.js
      overwrite: true

    - src: dev.webpack.config.js
      dest: <%= paths.config.configDir %>webpack/dev.webpack.config.js
      overwrite: true

    - src: prod.webpack.config.js
      dest: <%= paths.config.configDir %>webpack/prod.webpack.config.js
      overwrite: true

    - src: webpackHelpers.js
      dest: <%= paths.config.configDir %>webpack/webpackHelpers.js
      overwrite: true

  readme:
    extensionPoint:
      start: >
        `npm start` can be extended by modifying <%= link(paths.config.configDir + 'webpack/dev.webpack.config.js') %>
        and <%= link(paths.config.configDir + 'webpack/prod.webpack.config.js') %>. Confit will attempt to overwrite the contents
        files the next time `yo confit` is run, so make sure any modifications are committed to source control first.

  onEnd:
    - cmd: npm
      args: ['start']
