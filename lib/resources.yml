# Package Anchor
#package: !!inc/file 'lib/packages.yml'

# Globals
rootGeneratorName: generator-confit

# App configuration
app:
  subGenerators:  # This is the order that the sub-generators should be executed in. Try not to couple these together
    - confit:paths
    - confit:buildAssets
    - confit:buildCSS
    - confit:buildJS
    - confit:buildHTML
    - confit:build
    - confit:entryPoint
    - confit:serverDev
    - confit:serverProd
    - confit:testUnit
    - confit:testBrowser
    - confit:verify
    - confit:release
    - confit:sampleApp
    - confit:zzfinish
  defaultSupportedBrowsers: ['latest']
  supportedBrowsers:
    latest:
      label: Latest Versions (major browsers)
      browserList: ['last 1 version']
    latest2:
      label: Latest 2 Versions (major browsers)
      browserList: ['last 2 versions']
    legacyIE:
      label: Legacy Internet Explorer (9, 10, 11)
      browserList: ['ie9', 'ie10', 'ie11']
    legacyMobile:
      label: Legacy Mobile (Blackberry, Android Webview)
      browserList: ['bb', 'Android Webview']

  packages:
    - <<: *pkg_npm-run-all
    - <<: *pkg_rimraf

  tasks:
    - name: start
      tasks: ['npm run dev']
      description: Alias for `npm run dev` task
      features:

    - name: dev
      tasks: ['clean:dev', 'verify', '--parallel verify:watch build:dev serve:dev']
      description: Run project in development mode (verify code, create dev build into <%= paths.output.devDir %> folder, serve on **<%= serverDev.protocol + '://' + serverDev.hostname + ':' + serverDev.port %>**, watch for changes and reload the browser automatically)
      features:

    - name: build
      tasks: ['clean:prod', 'build:prod']
      description: Generate production build into <%= link(paths.output.prodDir) %> folder
      features:

    - name: build:serve
      tasks: ['build', 'serve:prod']
      description: Generate production build and serve on **<%= serverProd.protocol + '://' + serverProd.hostname + ':' + serverProd.port %>**'
      features:

    - name: clean:dev
      tasks: ['rimraf <%= paths.output.devDir %>']
      description:
      features:

    - name: clean:prod
      tasks: ['rimraf <%= paths.output.prodDir %>']
      description:
      features:

  templateFiles:
    - src: editorConfig
      dest: .editorconfig
      overwrite: false

build: {}

buildAssets: {}

# CSS configuration
buildCSS:
  defaultSourceFormat: stylus
  sourceFormat:
    css:
      ext: ['css']

    sass:
      ext: ['sass', 'scss']

    stylus:
      ext: ['styl']

buildHTML: {}

buildJS:
  readme:
    extensionPoint:
      buildJS: >
        The `buildJS.vendorScripts` array in <%= link(configFile) %> is designed to be edited manually.
        This property should contain NPM module names and/or references to JavaScript files (files must start with `./`).
        For example: `vendorScripts: ['jquery', './module/path/to/jsFile.js', 'angular2/core',  ...]`

  sourceFormat:
    ES5:
      ext: ['js']
      packages: []
      templates: []
      tasks: []

    ES6:
      ext: ['js']
      packages: []
      templates: []
      tasks: []

    TypeScript:
      ext: ['ts']
      packages:
        - <<: *pkg_typescript
        - <<: *pkg_typings

      templateFiles:
        - src: tsconfig.json.tpl
          dest: tsconfig.json
          overwrite: true

      tasks:
        - name: typingsInstall
          tasks: ['typings install']
          description: ''

      onInstall:
        - cmd: npm
          args: ['run', 'typingsInstall']

  sourceFormatDefault: ES6

  outputFormat:
    - ES5
    - ES6
  outputFormatDefault: ES5

  frameworks:
    AngularJS 1.x:
      packages:
        - <<: *pkg_angular
      typeLibs:
        - name: angular
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/angularjs/angular.d.ts#17ef40452039d19e06dc2a3815ea898c505860fa
        - name: jquery  # Needed when you use Angular, due to Angular's references to optionally use jQuery
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/jquery/jquery.d.ts#fab0b336b0414fac23963bde83f7d7077f6cf14c

      testPackages: # Test packages will be used *instead of* the framework packages, in the test harness!
        - <<: *pkg_angular
        - <<: *pkg_angular-mocks
      testTypeLibs:
        - name: angular-mocks
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/angularjs/angular-mocks.d.ts#77dd2668f85730372aa8e62152e652048e8b6b87


    AngularJS 2.x:
      packages:  # the order of packages is *very* important for angular2!
        - <<: *pkg_es6-shim
        - <<: *pkg_es6-promise
        - <<: *pkg_es7-reflect-metadata
        - <<: *pkg_rxjs
        - <<: *pkg_zone.js
        - <<: *pkg_angular2/core
      typeLibs:
        - name: es6-promise
          key: dependencies
          version: github:typed-typings/npm-es6-promise#fb04188767acfec1defd054fc8024fafa5cd4de7

        - name: es6-shim
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/es6-shim/es6-shim.d.ts#6697d6f7dadbf5773cb40ecda35a76027e0783b2

        - name: ng2
          key: ambientDependencies
          version: github:gdi2290/typings-ng2/ng2.d.ts#32998ff5584c0eab0cd9dc7704abb1c5c450701c

        - name: zone
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/zone/zone.d.ts#31e7317c9a0793857109236ef7c7f223305a8aa9

      testPackages:
        - <<: *pkg_es6-shim
        - <<: *pkg_es6-promise
        - <<: *pkg_reflect-metadata
        - <<: *pkg_zone.js/dist/zone-microtask.js
        - <<: *pkg_zone.js/dist/long-stack-trace-zone.js
        - <<: *pkg_zone.js/dist/jasmine-patch.js
        - <<: *pkg_angular2/core
      testTypeLibs: []

    React (latest):
      packages:
        - <<: *pkg_react
      typeLibs: []
      testPackages: []
      testTypeLibs: []

entryPoint:
  readme:
    extensionPoint:
      entryPoint: >
        The `entryPoint.entryPoints` object in <%= link(configFile) %> is designed to be edited manually.
        It represents the starting-point(s) of the application (like a `main()` function). Normally an application has
        one entry point, but it is possible to have more than one.
        `entryPoint.entryPoints` must have at-least one property (e.g. `property: [file]`), where `file` is a list
        of NPM module names and/or references to JavaScript files (file references must start with `./`);

# Path Defaults
paths:
  defaults:
    input:
      srcDir: src/
      modulesSubDir: modules/
      assetsDir: assets/
      stylesDir: styles/
      templateDir: template/
      unitTestDir: unitTest/
      browserTestDir: browserTest/

    output:
      devDir: dev/
      prodDir: dist/
      assetsSubDir: assets/
      cssSubDir: css/
      jsSubDir: js/
      vendorJSSubDir: vendor/
      viewsSubDir: views/
      reportDir: reports/

    config:
      configDir: config/
      tempDir: .tmp/

  templateFiles:
    - src: gitignore
      dest: .gitignore
      overwrite: false

# README section for the template tags that will appear inside the README.md template
readme:
  RM_HEADING: '# <%- name %>'
  RM_DESCRIPTION: '> <%- description %>'
  RM_INSTALL: |
    ## Install

        npm install <%- name %>

  RM_CONTRIBUTING: |
    ## Contributing

    See [CONTRIBUTING.md](CONTRIBUTING.md).

#  CN_ALL_TASKS: |
#    ## All Tasks
#
#    Command | Description
#    :------ | :----------
#    <% objectValues(readme.buildTask).forEach(function(value) {
#    %><pre><%- value.command %></pre> | <%- value.description %><%
#      if (value.features && value.features.length) {
#        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
#      } %>
#    <% }); %>

  CN_BUILD_TASKS: |
    ## Build Tasks

    Command | Description
    :------ | :----------
    <% objectValues(readme.buildTask.app).concat(objectValues(readme.buildTask.build)).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); %>


  CN_COMMIT_TASKS: |
    ## Commit Tasks

    Command | Description
    :------ | :----------
    <pre>git status</pre> | Lists the current branch and the status of changed files
    <pre>git log</pre> | Displays the commit log (press Q to quit viewing)
    <pre>git add .</pre> | Stages all modified & untracked files, ready to be committed
    <% objectValues(readme.buildTask.commit).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); -%>
    <pre>git push</pre> | Push local repository changes to remote repository


  CN_RELEASE_TASKS: |
    ## Release Tasks

    Command | Description
    :------ | :----------
    <% objectValues(readme.buildTask.release).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); %>

  CN_TEST_TASKS: |
    ## Test Tasks

    Command | Description
    :------ | :----------
    <% objectValues(readme.buildTask.testUnit).concat(objectValues(readme.buildTask.testBrowser)).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); %>


  CN_VERIFY_TASKS: |
    ## Verification (Linting) Tasks

    Command | Description
    :------ | :----------
    <% objectValues(readme.buildTask.verify).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); %>


  CN_CHANGING_BUILD_TOOL_CONFIG: |
    ## Changing build-tool configuration

    There are 3 ways you can change the build-tool configuration for this project:

    1. BEST: Modify the Confit configuration file (<%= link(configFile) %>) by hand, then re-run `yo confit` and tell it to use the existing configuration.
    1. OK: Re-run `yo confit` and provide new answers to the questions. **Confit will attempt to overwrite your existing configuration (it will prompt for confirmation), so make sure you have committed your code to a source control (e.g. git) first**.
      There are certain configuration settings which can **only** be specified by hand, in which case the first approach is still best.
    1. RISKY: Modify the generated build-tool config by hand. Be aware that if you re-run `yo confit` it will attempt to overwrite your changes. So commit your changes to source control first.

    Additionally, the **currently-generated** configuration can be extended in the following ways:

    - The task configuration is defined in [package.json](package.json). It is possible to change the task definitions to add your own sub-tasks.
    <% objectValues(readme.extensionPoint).forEach(function(value) {
    %>- <%- value -%>

    <% }); %>

  CN_HEADING: |
    # Contributing

    Welcome! Thanks for taking some time to find out more about how you can make **<%- name %>** even better.

#    - name: semantic-release
#      tasks: ['semantic-release pre', 'npm publish', 'semantic-release post']
#      description: Called by Travis CI to semantically-release the NPM module,
#      features: []

release: {}

# Sample App
sampleApp:
  demoModuleDir: demoModule/
  entryPointFileName:
    ES5: 'app.js'
    ES6: 'app.js'
    TypeScript: 'app.ts'

  templateFiles:
    - src: assets/**/*
      dest: <%= paths.input.modulesDir %>demoModule/<%= paths.input.assetsDir %>
      overwrite: true
      type: binary

    - src: browserTest/*
      dest: <%= paths.input.modulesDir %>demoModule/<%= paths.input.browserTestDir %>
      overwrite: true
      type: binary

  cssSourceFormat:
    css:
      entryPointFileName: app.css
      templateFiles:
        - src: css/app.css
          dest: <%= paths.input.modulesDir %>demoModule/<%= paths.input.stylesDir %>app.css
          overwrite: true
        - src: css/iconFont.css
          dest: <%= paths.input.modulesDir %>demoModule/<%= paths.input.stylesDir %>iconFont.css
          overwrite: true

    sass:
      entryPointFileName: app.sass
      templateFiles:
        - src: css/app.sass
          dest: <%= paths.input.modulesDir %>demoModule/<%= paths.input.stylesDir %>app.sass
          overwrite: true
        - src: css/iconFont.css
          dest: <%= paths.input.modulesDir %>demoModule/<%= paths.input.stylesDir %>iconFont.css
          overwrite: true

    stylus:
      entryPointFileName: app.styl
      templateFiles:
        - src: css/app.styl
          dest: <%= paths.input.modulesDir %>demoModule/<%= paths.input.stylesDir %>app.styl
          overwrite: true
        - src: css/iconFont.css
          dest: <%= paths.input.modulesDir %>demoModule/<%= paths.input.stylesDir %>iconFont.css
          overwrite: true

# Server - Development
serverDev:
  defaults:
    port: 3000
    hostname: localhost
    protocol: https

serverProd:
  defaults:
    port: 3000
    hostname: localhost
    protocol: https

testBrowser: {}

# TypeScript Utils
TypeScriptUtils:
  typeLibs:
    - name: node
      key: ambientDependencies
      version: github:DefinitelyTyped/DefinitelyTyped/node/node.d.ts#8cf8164641be73e8f1e652c2a5b967c7210b6729


verify:
  jsCodingStandard:
    none:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - <<: *pkg_eslint
        - <<: *pkg_eslint-config-defaults
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint.yml
          dest: (configDir)/verify/.eslintrc

    AirBnB:
      supportedSourceFormat: ['ES6']
      packages:
        - <<: *pkg_eslint
        - <<: *pkg_eslint-config-defaults
        - <<: *pkg_eslint-plugin-react
        - <<: *pkg_babel-eslint
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint.yml
          dest: (configDir)/verify/.eslintrc

    Google:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - <<: *pkg_eslint
        - <<: *pkg_eslint-config-defaults
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint.yml
          dest: (configDir)/verify/.eslintrc

    StandardJS:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - <<: *pkg_eslint-config-standard
        - <<: *pkg_eslint-plugin-standard
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint.yml
          dest: (configDir)/verify/.eslintrc

    TypeScript:
      supportedSourceFormat: ['TypeScript']
      packages:
        - <<: *pkg_tslint
      templateFiles:
        - src: tslint.json
          dest: (configDir)/verify/tslint.json


  cssCodingStandard:  # This is not quite an accurate name, but it is good enough for now.
    css:
      templateFiles: []
    sass:
      # No packages to install, as the build-tools will have their own
      templateFiles:
        - src: sasslintrc
          dest: (configDir)verify/.sasslintrc
    stylus:
      # No packages to install, as the build-tools will have their own
      templateFiles:
        - src: stylintrc
          dest: (configDir)verify/.stylintrc
