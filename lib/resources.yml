# App configuration
app:
  subGenerators:  # This is the order that the sub-generators should be executed in. Try not to couple these together
    - confit:paths
    - confit:buildAssets
    - confit:buildCSS
    - confit:buildJS
    - confit:buildHTML
    - confit:build
    - confit:entryPoint
    - confit:serverDev
    - confit:serverProd
    - confit:testUnit
    - confit:testBrowser
    - confit:verify
    - confit:sampleApp
    - confit:zzfinish

  packages:
    - name: npm-run-all
      version: '1.5.0'

  defaultSupportedBrowsers: ['latest']
  supportedBrowsers:
    latest:
      label: Latest Versions (major browsers)
      browserList: ['last 1 version']
    latest2:
      label: Latest 2 Versions (major browsers)
      browserList: ['last 2 versions']
    legacyIE:
      label: Legacy Internet Explorer (9, 10, 11)
      browserList: ['ie9', 'ie10', 'ie11']
    legacyMobile:
      label: Legacy Mobile (Blackberry, Android Webview)
      browserList: ['bb', 'Android Webview']


# CSS configuration
buildCSS:
  defaultSourceFormat: stylus
  sourceFormat:
    css:
      ext: ['css']
      entryPointFiles:
        - src: css/app.css
          dest: app.css
      sampleAppFiles:
        - src: css/iconFont.css
          dest: iconFont.css

    sass:
      ext: ['sass', 'scss']
      entryPointFiles:
        - src: css/app.sass
          dest: app.sass
      sampleAppFiles:
        - src: css/iconFont.css
          dest: iconFont.css

    stylus:
      ext: ['styl']
      entryPointFiles:
        - src: css/app.styl
          dest: app.styl
      sampleAppFiles:
        - src: css/iconFont.css
          dest: iconFont.css


buildJS:
  readme:
    extensionPoint: >
      The `buildJS.vendorScripts` array in <%= link(configFile) %> is designed to be edited manually.
      This property should contain NPM module names and/or references to JavaScript files (files must start with `./`).
      For example: `vendorScripts: ['jquery', './module/path/to/jsFile.js', ...]`

  sourceFormat:
    ES5:
      ext: ['js']
      packages: []
      templates: []
      tasks: []

    ES6:
      ext: ['js']
      packages: []
      templates: []
      tasks: []

    TypeScript:
      ext: ['ts']
      packages:
        - name: typescript
          version: '1.7.3'
        - name: typings
          version: '0.6.7'

      templates:
        - src: tsconfig.json.tpl
          dest: tsconfig.json

      tasks:
        - name: typingsInstall
          tasks: ['typings install']
          description: ''

      onInstall:
        cmd: npm
        args: ['run', 'typingsInstall']

  sourceFormatDefault: ES6

  outputFormat:
    - ES5
    - ES6
  outputFormatDefault: ES5

  frameworks:
    AngularJS 1.x:
      packages:
        - name: angular
          version: '1.4.9'
      typeLibs: []
      testPackages:
        - name: angular-mocks
          version: '1.4.9'
      testTypeLibs: []

    AngularJS 2.x:
      packages:
        - name: angular2
          version: '*'
      typeLibs: []
      testPackages: []
      testTypeLibs: []

    React (latest):
      packages:
        - name: react
          version: '*'
      typeLibs: []
      testPackages: []
      testTypeLibs: []

entryPoint:
  readme:
    extensionPoint: >
      The `entryPoint.entryPoints` object in <%= link(configFile) %> is designed to be edited manually.
      It represents the starting-point(s) of the application (like a `main()` function). Normally an application has
      one entry point, but it is possible to have more than one.
      `entryPoint.entryPoints` must have at-least property (e.g. `property: [file]`), where `file` is a list
      of NPM module names and/or references to JavaScript files (file references must start with `./`);

# Path Defaults
path:
  defaults:
    input:
      srcDir: src/
      modulesSubDir: modules/
      assetsDir: assets/
      stylesDir: styles/
      templateDir: template/
      unitTestDir: unitTest/
      browserTestDir: browserTest/

    output:
      devDir: dev/
      prodDir: dist/
      assetsSubDir: assets/
      cssSubDir: css/
      jsSubDir: js/
      vendorJSSubDir: vendor/
      viewsSubDir: views/
      reportDir: reports/

    config:
      configDir: config/
      tempDir: .tmp/

# README section for the template tags that will appear inside the README.md template
readme:
  RM_HEADING: '# <%- name %>'
  RM_DESCRIPTION: '> <%- description %>'
  RM_INSTALL: |
    ##Install

        npm install <%- name %>

  RM_DEVELOPMENT_TASKS: |
    ##Development Tasks

    <% objectValues(config.readme.buildTask).forEach(function(value) {
    %>- `<%- value.command %>`: <%- value.description %>
    <% }); %>

  RM_CHANGING_BUILD_TOOL_CONFIG: |
    ##Changing build-tool configuration

    There are 3 ways you can change the build-tool configuration for this project:

    1. BEST: Modify the Confit configuration file (<%= link(configFile) %>) by hand, then re-run `yo confit` and tell it to use the existing configuration.
    1. OK: Re-run `yo confit` and provide new answers to the questions. **Confit will attempt to overwrite your existing configuration (it will prompt for confirmation), so make sure you have committed your code to a source control (e.g. git) first**.
      There are certain configuration settings which can **only** be specified by hand, in which case the first approach is still necessary needs to be used.
    1. RISKY: Modify the generated build-tool config by hand. Be aware that if you re-run `yo confit` it will attempt to overwrite your changes. So commit your changes to source control first.

    Additionally, the **currently-generated** configuration can be extended in the following ways:

    - The task configuration is defined in [package.json](package.json). It is possible to change the task definitions to add your own sub-tasks.
    <% objectValues(config.readme.extensionPoint).forEach(function(value) {
    %>- <%- value -%>

    <% }); %>

  RM_BUILD_TOOL_FEATURES: |
    ## Build Tool Features

    <% objectValues(config.readme.buildToolFeature).forEach(function(value) {
    %>- <%- value -%>
    <% }); %>

# Sample App
sampleApp:
  demoModuleDir: demoModule/
  entryPointFileName:
    ES5: 'app.js'
    ES6: 'app.js'
    TypeScript: 'app.ts'

  jsExtension:
    ES5: 'js'
    ES6: 'js'
    TypeScript: 'ts'

# Server - Development
serverDev:
  defaults:
    port: 3000
    hostname: localhost
    protocol: https

serverProd:
  defaults:
    port: 3000
    hostname: localhost
    protocol: https


# TypeScript Utils
TypeScriptUtils:
  typeLibs:
    - name: node
      key: ambientDependencies
      version: github:DefinitelyTyped/DefinitelyTyped/node/node.d.ts#8cf8164641be73e8f1e652c2a5b967c7210b6729


verify:
  jsCodingStandard:
    none:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - name: eslint
          version: '1.10.3'
        - name: eslint-config-defaults
          version: '8.0.2'
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint-off.json
          dest: (configDir)/verify/.eslintrc

    AirBnB:
      supportedSourceFormat: ['ES6']
      packages:
        - name: eslint
          version: '1.10.3'
        - name: eslint-config-defaults
          version: '8.0.2'
        - name: eslint-plugin-react
          version: '3.16.1'
        - name: babel-eslint
          version: '4.1.8'
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint-airbnb.json
          dest: (configDir)/verify/.eslintrc

    Google:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - name: eslint
          version: '1.10.3'
        - name: eslint-config-defaults
          version: '8.0.2'
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint-google.json
          dest: (configDir)/verify/.eslintrc

    StandardJS:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - name: eslint-config-standard
          version: '4.4.0'
        - name:  eslint-plugin-standard
          version: '1.3.1'
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint-standardJS.json
          dest: (configDir)/verify/.eslintrc

    TypeScript:
      supportedSourceFormat: ['TypeScript']
      packages:
        - name: tslint
          version: '3.3.0'
      templateFiles:
        - src: tslint.json
          dest: (configDir)/verify/tslint.json


  cssCodingStandard:  # This is not quite an accurate name, but it is good enough for now.
    css:
      templateFiles: []
    sass:
      # No packages to install, as the build-tools will have their own
      templateFiles:
        - src: sasslintrc
          dest: (configDir)verify/.sasslintrc
    stylus:
      # No packages to install, as the build-tools will have their own
      templateFiles:
        - src: stylintrc
          dest: (configDir)verify/.stylintrc
