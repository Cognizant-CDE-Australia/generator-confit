# App configuration
app:
  subGenerators:  # This is the order that the sub-generators should be executed in. Try not to couple these together
    - confit:buildBrowser
    - confit:paths
    - confit:buildAssets
    - confit:buildCSS
    - confit:buildJS
    - confit:buildHTML
    - confit:entryPoint
    - confit:serverDev
    - confit:serverProd
    - confit:testUnit
    - confit:testBrowser
    - confit:verify
    - confit:documentation
    - confit:release
    - confit:sampleApp
    - confit:zzfinish

  packages:
    - <<: *pkg_npm-run-all
    - <<: *pkg_rimraf

  tasks:
    - name: start
      tasks: ['npm run dev']
      description: Alias for `npm run dev` task
      features:

    - name: dev
      tasks: ['clean:dev', '--parallel verify:watch build:dev serve:dev']
      description: Run project in development mode (verify code, create dev build into <%= paths.output.devDir %> folder, serve on **<%= serverDev.protocol + '://' + serverDev.hostname + ':' + serverDev.port %>**, watch for changes and reload the browser automatically)
      features:

    - name: build
      tasks: ['clean:prod', 'build:prod']
      description: Generate production build into <%= link(paths.output.prodDir) %> folder
      features:

    - name: build:serve
      tasks: ['build', 'serve:prod']
      description: Generate production build and serve on **<%= serverProd.protocol + '://' + serverProd.hostname + ':' + serverProd.port %>**'
      features:

    - name: clean:dev
      tasks: ['rimraf <%= paths.output.devDir %>']
      description:
      features:

    - name: clean:prod
      tasks: ['rimraf <%= paths.output.prodDir %>']
      description:
      features:

buildBrowser:
  defaultSupportedBrowsers: ['latest']

  supportedBrowsers:
    latest:
      label: Latest Versions (major browsers)
      browserList: ['last 1 version']
    latest2:
      label: Latest 2 Versions (major browsers)
      browserList: ['last 2 versions']
    legacyIE:
      label: Legacy Internet Explorer (9, 10, 11)
      browserList: ['ie 9', 'ie 10', 'ie 11']
    legacyMobile:
      label: Legacy Mobile (Blackberry, Android Webview)
      browserList: ['bb', 'Android Webview']

buildAssets: {}

# CSS configuration
buildCSS:
  defaultSourceFormat: stylus
  useCssRegression: true
  sourceFormat:
    css:
      ext: ['css']

    sass:
      ext: ['sass', 'scss']

    stylus:
      ext: ['styl']

buildHTML: {}

buildJS:
  readme:
    extensionPoint:
      buildJS.frameworkScripts: >
        The `buildJS.frameworkScripts` array in <%= link(configFile) %> contains framework-specific scripts, and should not be modified.
        If a sample project is generated, the additional framework scripts needed by the sample app will also appear here.
        This property will be overwritten **every time** Confit is run.

      buildJS.vendorScripts: >
        The `buildJS.vendorScripts` array in <%= link(configFile) %> is designed to be edited manually.
        This property should contain NPM module names and/or references to JavaScript files (files must start with `./`).
        For example: `vendorScripts: ['jquery', './module/path/to/jsFile.js', 'moment/timezone',  ...]`

  sourceFormat:
    ES6:
      ext: ['js']
      templateFiles:  # We need to use Babel EVEN when outputFormat is NOT ES5 so that browser unit testing works (as the new unit testing plugin is tied to Babel)
        - src: .babelrc.tpl
          dest: .babelrc
          overwrite: true
      packages:
        - <<: *pkg_babel-core
        - <<: *pkg_babel-runtime
        - <<: *pkg_babel-loader
        - <<: *pkg_babel-preset-es2015
      tasks: []


    TypeScript:
      ext: ['ts']
      packages:
        - <<: *pkg_typescript
        - <<: *pkg_typings

      templateFiles:
        - src: tsconfig.json.tpl
          dest: tsconfig.json
          overwrite: true

      tasks:
        - name: typings:install
          tasks: ['typings install']
          description: ''

      typeLibs:
        - name: node
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/node/node.d.ts#8cf8164641be73e8f1e652c2a5b967c7210b6729

      onInstall:
        - cmd: npm
          args: ['run', 'typings:install']

  sourceFormatDefault: ES6

  outputFormat:
    - ES5
    - ES6
  outputFormatDefault: ES5

  showVendorScripts: true     # Flag to indicate that whether the vendorScripts question in buildJS should be shown or not

  frameworks:
    AngularJS 1.x:
      packages:
        - <<: *pkg_angular
      typeLibs:
        - name: angular
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/angularjs/angular.d.ts#17ef40452039d19e06dc2a3815ea898c505860fa
        - name: jquery  # Needed when you use Angular, due to Angular's references to optionally use jQuery
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/jquery/jquery.d.ts#fab0b336b0414fac23963bde83f7d7077f6cf14c

      testPackages: # Test packages will be used *instead of* the framework packages, in the test harness!
        - <<: *pkg_angular
        - <<: *pkg_angular-mocks
      testTypeLibs:
        - name: angular-mocks
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/angularjs/angular-mocks.d.ts#77dd2668f85730372aa8e62152e652048e8b6b87


    AngularJS 2.x:
      packages:
        - <<: *pkg_core-js          # In polyfills.ts
        - <<: *pkg_zone.js          # In polyfills.ts
        - <<: *pkg_rxjs             # In vendor.ts
        - <<: *pkg_angular2/platform/browser
        - <<: *pkg_angular2/platform/common_dom
        - <<: *pkg_angular2/core
        - <<: *pkg_angular2/common

      typeLibs:
        - name: core-js
          key: ambientDependencies
          version: github:DefinitelyTyped/DefinitelyTyped/core-js/core-js.d.ts#7de6c3dd94feaeb21f20054b9f30d5dabc5efabd

        - name: zone.js
          key: dependencies
          version: github:gdi2290/typed-zone.js#66ea8a3451542bb7798369306840e46be1d6ec89

      testPackages:  # Maps to Karma test.specs.js    https://github.com/AngularClass/angular2-webpack-starter/blob/master/config/spec-bundle.js
        - <<: *pkg_core-js
        - <<: *pkg_ts-helpers
        - <<: *pkg_zone.js/dist/zone
        - <<: *pkg_zone.js/dist/long-stack-trace-zone
        - <<: *pkg_zone.js/dist/jasmine-patch
        - <<: *pkg_zone.js/dist/async-test
        - <<: *pkg_rxjs
        # Angular2 source code is loaded by each component that is being tested. So no need to include Angular2 here.
#        - <<: *pkg_angular2/core

      testTypeLibs: []

    React (latest):
      packages:
        - <<: *pkg_react
      typeLibs: []
      testPackages: []
      testTypeLibs: []


entryPoint:
  readme:
    extensionPoint:
      entryPoint: >
        The `entryPoint.entryPoints` object in <%= link(configFile) %> is designed to be edited manually.
        It represents the starting-point(s) of the application (like a `main()` function). Normally an application has
        one entry point, but it is possible to have more than one.
        `entryPoint.entryPoints` must have at-least one property (e.g. `property: [file]`), where `file` is a list
        of NPM module names and/or references to JavaScript files (file references must start with `./`);

# Path Defaults
paths:
  prompts:
    - name: input.srcDir
      heading: |
        Source-code paths

      message: Path to SOURCE directory (relative to the current directory)

    - name: input.modulesSubDir
      message: Path to MODULES directory (relative to the SOURCE directory)

    - name: input.assetsDir
      message: Name of module ASSETS directory (for images, fonts)

    - name: input.stylesDir
      message: Name of module STYLES directory (for CSS)

    - name: input.templateDir
      message: Name of module TEMPLATE directory (for component HTML templates)

    - name: input.unitTestDir
      message: Name of module UNIT TEST directory

    - name: input.browserTestDir
      message: Name of module FUNCTIONAL TEST directory

    - name: output.devDir
      heading: |
        Output paths

      message: Path to DEV OUTPUT directory (relative to the current directory)

    - name: output.prodDir
      message: Path to PRODUCTION OUTPUT directory (relative to the current directory)

    - name: output.assetsSubDir
      message: Path to ASSETS sub-directory (relative to the OUTPUT directory)

    - name: output.cssSubDir
      message: Path to CSS sub-directory (relative to the OUTPUT directory)

    - name: output.jsSubDir
      message: Path to JS sub-directory (relative to OUTPUT directory)

    - name: output.vendorJSSubDir
      message: Path to VENDOR JS libraries sub-directory (relative to OUTPUT directory)

    - name: output.reportDir
      message: Path to TEST REPORTS directory (relative to the current directory)

    - name: config.configDir
      heading: |
        Config paths

      message: Path to CONFIG directory (relative to the current directory)


  defaults:
    input:
      srcDir: src/
      modulesSubDir: modules/
      assetsDir: assets/
      stylesDir: styles/
      templateDir: template/
      unitTestDir: unitTest/
      browserTestDir: browserTest/
      testDir: test/

    output:
      devDir: dev/
      prodDir: dist/
      assetsSubDir: assets/
      cssSubDir: css/
      jsSubDir: js/
      vendorJSSubDir: vendor/
      reportDir: reports/

    config:
      configDir: config/

  pathsToGenerate:
    - name: input.modulesDir
      value: <%- paths.input.srcDir + '/' + paths.input.modulesSubDir %>

  templateFiles:
    - src: gitignore
      dest: .gitignore
      overwrite: false

# README section for the template tags that will appear inside the README.md template
readme:
  RM_DIR_STRUCTURE: |
    ## Directory Structure

    Code is organised into modules which contain one-or-more components. This a great way to ensure maintainable code by encapsulation of behavior logic. A component is basically a self contained app usually in a single file or a folder with each concern as a file: style, template, specs, e2e, and component class. Here's how it looks:
    ```<% var maxDirLen = 30; %>
    <%- pkg.name %>/
     ├──<%- rpad(paths.config.configDir, maxDirLen)%>* configuration files live here (e.g. grunt, webpack, verify, testUnit)
     │
     ├──<%- rpad(paths.input.srcDir, maxDirLen) %>* source code files should be here
     │   └──<%- rpad(paths.input.modulesSubDir, maxDirLen - 4) %>* all source code modules|components|features should appear as sub-directories under this directory
     │       ├──<%- rpad('common/', maxDirLen - 8) %>
     │       ├──<%- rpad('featureA/', maxDirLen - 8) %>
     │       └──<%- rpad('featureB/', maxDirLen - 8) %>
     │           ├──<%- rpad(paths.input.assetsDir, maxDirLen - 12) %>
     │           │   ├──<%- rpad('font', maxDirLen - 16) %>* fonts for this module
     │           │   └──<%- rpad('img', maxDirLen - 16) %>* images for this module
     │           ├──<%- rpad(paths.input.stylesDir, maxDirLen - 12) %>* css source code for this module
     │           ├──<%- rpad(paths.input.templateDir, maxDirLen - 12) %>* HTML templates for this module
     │           ├──<%- rpad(paths.input.unitTestDir, maxDirLen - 12) %>* unit test specs for this module
     │           └──<%- rpad(paths.input.browserTestDir, maxDirLen - 12) %>* browser test specs for this module
     │
     ├──<%- rpad(paths.output.devDir, maxDirLen) %>* development-build code is output here (Webpack may keep it in memory for speed)
     ├──<%- rpad(paths.output.prodDir, maxDirLen) %>* production-build code is output here
     │   ├──<%- rpad(paths.output.assetsSubDir, maxDirLen - 4) %>* all assets appear here, under module sub-folders. e.g.:
     │   │   └──<%- rpad('featureB/', maxDirLen - 8) %>
     │   │       ├──<%- rpad('font', maxDirLen - 12) %>
     │   │       └──<%- rpad('img', maxDirLen - 12) %>
     │   ├──<%- rpad(paths.output.cssSubDir, maxDirLen - 4) %>* compiled CSS files
     │   ├──<%- rpad(paths.output.jsSubDir, maxDirLen - 4) %>* minified JS files
     │   └──<%- rpad(paths.output.vendorJSSubDir, maxDirLen - 4) %>* minified vendor JS files
     │
     ├──<%- rpad(paths.output.reportDir, maxDirLen) %>* test reports appear here<% if (documentation.generateDocs) { %>
     │
     ├──<%- rpad(documentation.srcDir, maxDirLen) %>* source/content for the documentation website goes here
     ├──<%- rpad(documentation.outputDir, maxDirLen) %>* the documentation website is generated here<% } %>
     │
     ├──<%- rpad(configFile, maxDirLen) %>* the project config file generated by 'yo confit'
     ├──<%- rpad('CONTRIBUTING.md', maxDirLen) %>* how to contribute to the project
     ├──<%- rpad('README.md', maxDirLen) %>* this file
     └──<%- rpad('package.json', maxDirLen) %>* NPM package description file
    ```

  RM_NEXT_STEPS: |
    ## *Next Steps to Setup your Project*

        Remove this section once you are comfortable updating your project.

    - [ ] Update [package.json](package.json) with a nice description, then run `yo confit --skip-install --skip-run` and see the README.md file is updated
    - [ ] Add a new **dependency** to your project:
      - For a **source-code** dependency:
        1. `npm i {nodeModule} --save`
        <% if (buildJS.sourceFormat === 'TypeScript') {
        -%>1. `typings install {nodeModule} --save --ambient` to install the type library as an (ambient) dependency <% } %>
        1. Edit <%- link(configFile) %> and include {nodeModule} as an item inside the `buildJS.vendorScripts` array
        1. `yo confit` to regenerate your build configuration
      - For a **development** dependency:
        1. `npm i {nodeModule} --save-dev`
        1. Edit the configuration file(s) that will need to use this dependency in the areas of the file that will not be overwritten when `yo confit` is run.
         For example:
         ```js

         // Changes in this region will be preserved.

         // START_CONFIT_GENERATED_CONTENT

           // Changes in this region will be overwritten if `yo confit` is run again.

         // END_CONFIT_GENERATED_CONTENT

         // Changes in this region will be preserved.

         ```
      - For a **test** dependency:
        1. `npm i {nodeModule} --save`
        <% if (buildJS.sourceFormat === 'TypeScript') {
        -%>1. `typings install {nodeModule} --save --ambient` to install the type library as an (ambient) dependency<% } %>
        1. Edit <%- link(configFile) %> and include {nodeModule} as an item inside the `testUnit.testDependencies` array
        1. Run `yo confit` to regenerate your build configuration
    <% if (release.useSemantic) { %>- [ ] Complete the installation of the **semantic release** tool:
      1. Make sure you have:
        - a GitHub login
        - an NPM login
        - a TravisCI login (though you can still proceed if you use a different CI tool)
      1. Run `semantic-release-cli setup` to complete the installation
    <% } -%>
    - [ ] Add a new module to `<%- paths.input.modulesDir %>`
    - [ ] Run `npm start`, change the stylesheet and see the changes appear immediately
    - [ ] Run `npm test` to execute the unit tests and see the test coverage
    - [ ] Run `npm start && test:browser` to execute the browser tests
    <% if (release.commitMessageFormat === 'Conventional') { %>- [ ] Run `git cz` to commit changes with a conventional commit message
    <% } -%>



# Sample App
sampleApp:
  demoDir: <%= paths.input.modulesSubDir %>demoModule/

  # An array of optional configuration
  additionalConfig:
    - configKey: cssSourceFormat
      codingStandardExpression: config.buildCSS.sourceFormat

  templateFiles:
    - src: assets/**/*
      dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.assetsDir %>
      overwrite: true
      noParse: true

    - src: browserTest/*
      dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.browserTestDir %>
      overwrite: true
      noParse: true

  cssSourceFormat:
    css:
      entryPointFileNames:
        - app.css
      templateFiles:
        - src: css/app.css
          dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.stylesDir %>app.css
          overwrite: true
        - src: css/iconFont.css
          dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.stylesDir %>iconFont.css
          overwrite: true

    sass:
      entryPointFileNames:
        - app.sass
      templateFiles:
        - src: css/app.sass
          dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.stylesDir %>app.sass
          overwrite: true
        - src: css/iconFont.css
          dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.stylesDir %>iconFont.css
          overwrite: true

    stylus:
      entryPointFileNames:
        - app.styl
      templateFiles:
        - src: css/app.styl
          dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.stylesDir %>app.styl
          overwrite: true
        - src: css/iconFont.css
          dest: <%- paths.input.srcDir + resources.sampleApp.demoDir + paths.input.stylesDir %>iconFont.css
          overwrite: true


# Server - Development
serverDev:
  defaults:
    port: 3000
    hostname: localhost
    protocol: https

serverProd:
  defaults:
    port: 3000
    hostname: localhost
    protocol: https

testBrowser: {}

verify:
  codeToVerify:
    - configKey: cssCodingStandard
      codingStandardExpression: config.buildCSS.sourceFormat
      taskName: verify:css

    - configKey: jsCodingStandard
      codingStandardExpression: config.verify.jsCodingStandard
      taskName: verify:js

 # Common config across implementations
  baseJSConfig: &jsCodingStandardBase
    packages: &jsCodingBasePackages
      - <<: *pkg_eslint
      - <<: *pkg_babel-eslint     # We may not need this in the near future. ESLint can parse ES6 & ES7 things
    templateFiles:
      - src: eslintignore.yml.tpl
        dest: .eslintignore
        overwrite: true
      - src: eslint.yml
        dest: <%= paths.config.configDir %>verify/.eslintrc
        overwrite: true

  jsCodingStandard:
    # These keys are used in the UI...
    none:
      <<: *jsCodingStandardBase
      supportedSourceFormat: ['ES6']

    AirBnB:
      <<: *jsCodingStandardBase
      supportedSourceFormat: ['ES6']
      packages:
        - *jsCodingBasePackages
        - <<: *pkg_eslint-config-airbnb
        - <<: *pkg_eslint-plugin-import
        - <<: *pkg_eslint-plugin-react
        - <<: *pkg_eslint-plugin-jsx-a11y

    ESLint:
      <<: *jsCodingStandardBase
      supportedSourceFormat: ['ES6']

    Google:
      <<: *jsCodingStandardBase
      supportedSourceFormat: ['ES6']
      packages:
        - *jsCodingBasePackages
        - <<: *pkg_eslint-config-google

    StandardJS:
      <<: *jsCodingStandardBase
      supportedSourceFormat: ['ES6']
      packages:
        - *jsCodingBasePackages
        - <<: *pkg_eslint-config-standard
        - <<: *pkg_eslint-plugin-standard
        - <<: *pkg_eslint-plugin-promise

    TypeScript:
      supportedSourceFormat: ['TypeScript']
      packages:
        - <<: *pkg_tslint
      templateFiles:
        - src: tslint.json
          dest: <%= paths.config.configDir %>verify/tslint.json


  cssCodingStandard:  # This is not quite an accurate name, but it is good enough for now.
    css:
      templateFiles: []
    sass:
      # No packages to install, as the build-tools will have their own
      templateFiles:
        - src: sasslint.yml
          dest: <%= paths.config.configDir %>verify/sasslint.yml
    stylus:
      # No packages to install, as the build-tools will have their own
      templateFiles:
        - src: stylintrc
          dest: <%= paths.config.configDir %>verify/.stylintrc
