# App configuration
app:
  subGenerators:
    - confit:paths
    - confit:buildJS
    - confit:entryPoint
    - confit:testUnit
    - confit:verify
    - confit:release
    - confit:sampleApp
    - confit:zzfinish

  packages:
    - <<: *pkg_npm-run-all
    - <<: *pkg_rimraf

  tasks:
    - name: start
      tasks: ['npm run dev']
      description: Alias for `npm run dev` task
      features:

    - name: dev
      tasks: ['verify', '--parallel verify:watch']    # Later, add build task if required
      description: Run project in development mode (verify code, and re-verify when code is changed)
      features:

#    - name: build
#      tasks: ['clean:prod']   # Later on, we may need to add a build-task here
#      description: Generate production build into <%= link(paths.output.prodDir) %> folder
#      features:
#
#    - name: clean:prod
#      tasks: ['rimraf <%= paths.output.prodDir %>']
#      description:
#      features:

buildJS:
  sourceFormat:
    ES6:
      ext: ['js']
      packages: []
      templates: []
      tasks: []

  sourceFormatDefault: ES6

  outputFormat:
    - ES6
  outputFormatDefault: ES6

  frameworks: {}


entryPoint:
  readme:
    extensionPoint:
      entryPoint: >
        The `entryPoint.entryPoints` object in <%= link(configFile) %> is designed to be edited manually.
        It represents the starting-point(s) of the application (like a `main()` function). Normally an application has
        one entry point, but it is possible to have more than one.
        `entryPoint.entryPoints` must have at-least one property (e.g. `property: [file]`), where `file` is a list
        of NPM module names and/or references to JavaScript files (file references must start with `./`);

# Path Defaults
paths:
  prompts:
    - name: input.srcDir
      message: Path to SOURCE directory (relative to the current directory)

    - name: input.unitTestDir
      message: Name of UNIT TEST directory (relative to the current directory)

    - name: output.prodDir
      message: Path to BUILD directory (relative to the current directory)

    - name: output.reportDir
      message: Path to TEST REPORTS directory (relative to the current directory)

    - name: config.configDir
      message: Path to CONFIG directory (relative to the current directory)


  defaults:
    input:
      srcDir: src/
      unitTestDir: test/

    output:
      prodDir: dist/
      reportDir: reports/

    config:
      configDir: config/

  pathsToGenerate:
    - name: input.libDir
      value: <%- paths.input.srcDir %>/lib

  templateFiles:
    - src: gitignore
      dest: .gitignore
      overwrite: false

# README section for the template tags that will appear inside the README.md template
readme:
  RM_HEADING: '# <%- pkg.name %>'
  RM_DESCRIPTION: '> <%- pkg.description %>'
  RM_INSTALL: |
    ## Install

        npm install <%- pkg.name %>

  RM_DIR_STRUCTURE: |
    ## Directory Structure

    Code is organised into modules which contain one-or-more components. This a great way to ensure maintainable code by encapsulation of behavior logic. A component is basically a self contained app usually in a single file or a folder with each concern as a file: style, template, specs, e2e, and component class. Here's how it looks:
    ```<% var maxDirLen = 30; %>
    <%- pkg.name %>/
     ├──<%- rpad(paths.config.configDir, maxDirLen)%>* configuration files live here (e.g. grunt, webpack, verify, testUnit)
     │
     ├──<%- rpad(paths.input.srcDir, maxDirLen) %>* source code files should be here
     │
     ├──<%- rpad(paths.output.prodDir, maxDirLen) %>* production-build code should live here
     │
     ├──<%- rpad(paths.output.reportDir, maxDirLen) %>* test reports appear here
     │
     ├──<%- rpad(paths.input.unitTestDir, maxDirLen) %>* unit test specifications live here
     │
     ├──<%- rpad(configFile, maxDirLen) %>* The project config file generated by 'yo confit'
     ├──<%- rpad('CONTRIBUTING.md', maxDirLen) %>* how to contribute to the repo
     ├──<%- rpad('README.md', maxDirLen) %>* this file
     └──<%- rpad('package.json', maxDirLen) %>* what NPM uses to manage it's dependencies
    ```

  RM_CONTRIBUTING: |
    ## Contributing

    See [CONTRIBUTING.md](CONTRIBUTING.md).

  RM_NEXT_STEPS: |
    ## *Next Steps to Setup your Project*

        Remove this section once you are comfortable updating your project.

    - [ ] Update [package.json](package.json) with a nice description, then run `yo confit --skip-install --skip-run` and see the README.md file is updated
    - [ ] Add a new **dependency** to your project:
      - For a **source-code** dependency:
        1. `npm i {nodeModule} --save`
      - For a **development** dependency:
        1. `npm i {nodeModule} --save-dev`
      - For a **test** dependency:
        1. `npm i {nodeModule} --save`
    <% if (release.useSemantic) { %>- [ ] Complete the installation of the **semantic release** tool:
      1. Make sure you have:
        - a GitHub login
        - an NPM login
        - a TravisCI login (though you can still proceed if you use a different CI tool)
      1. Run `semantic-release-cli setup` to complete the installation
    <% } -%>
    - [ ] Run `npm test` to execute the tests and see the test coverage
    <% if (release.commitMessageFormat === 'Conventional') { %>- [ ] Run `git cz` to commit changes with a conventional commit message
    <% } -%>


  RM_LICENSE: |
    ## License

    <% if (!app.license || app.license === 'UNLICENSED') { %>This software does not have a license.
    <% } else { -%>This software is licensed under the <%- app.license %> Licence. See [LICENSE](LICENSE).<% } -%>

  CN_HEADING: |
    # Contributing

    Welcome! This document explains how you can contribute to making **<%- pkg.name %>** even better.

  CN_GETTING_STARTED: |
    # Getting Started

    ## Installation

    ```
    git clone <this repo>
    npm install
    ```

  CN_GITFLOW_PROCESS: |
    # GitFlow Development Process

    This project uses the [GitHub Flow](https://guides.github.com/introduction/flow/index.html) workflow.

    ## Create a branch
    When you're working on a project, you're going to have a bunch of different features or ideas in progress at any given time – some of which are ready to go, and others which are not. Branching exists to help you manage this workflow.

    When you create a branch in your project, you're creating an environment where you can try out new ideas. Changes you make on a branch don't affect the `master` branch, so you're free to experiment and commit changes, safe in the knowledge that your branch won't be merged until it's ready to be reviewed by someone you're collaborating with.

    ###ProTip

    Branching is a core concept in Git, and the entire GitHub Flow is based upon it. There's only one rule: anything in the `master` branch is always deployable.

    Because of this, it's extremely important that your new branch is created off of `master` when working on a feature or a fix. Your branch name should be descriptive (e.g., `refactor-authentication`, `user-content-cache-key`, `make-retina-avatars`), so that others can see what is being worked on.

    ## Add commits
    Once your branch has been created, it's time to start making changes. Whenever you add, edit, or delete a file, you're making a commit, and adding them to your branch. This process of adding commits keeps track of your progress as you work on a feature branch.

    Commits also create a transparent history of your work that others can follow to understand what you've done and why. Each commit has an associated commit message, which is a description explaining why a particular change was made. Furthermore, each commit is considered a separate unit of change. This lets you roll back changes if a bug is found, or if you decide to head in a different direction.

    ###ProTip

    Commit messages are important, especially since Git tracks your changes and then displays them as commits once they're pushed to the server. By writing clear commit messages, you can make it easier for other people to follow along and provide feedback.

    ## Open a pull request

    Pull Requests initiate discussion about your commits. Because they're tightly integrated with the underlying Git repository, anyone can see exactly what changes would be merged if they accept your request.

    You can open a Pull Request at any point during the development process: when you have little or no code but want to share some screenshots or general ideas, when you're stuck and need help or advice, or when you're ready for someone to review your work. By using GitHub's @mention system in your Pull Request message, you can ask for feedback from specific people or teams, whether they're down the hall or ten time zones away.

    ###ProTip

    Pull Requests are useful for contributing to open source projects and for managing changes to shared repositories. If you're using a Fork & Pull Model, Pull Requests provide a way to notify project maintainers about the changes you'd like them to consider. If you're using a Shared Repository Model, Pull Requests help start code review and conversation about proposed changes before they're merged into the `master` branch.

    ## Discuss and review your code
    Once a Pull Request has been opened, the person or team reviewing your changes may have questions or comments. Perhaps the coding style doesn't match project guidelines, the change is missing unit tests, or maybe everything looks great and props are in order. Pull Requests are designed to encourage and capture this type of conversation.

    You can also continue to push to your branch in light of discussion and feedback about your commits. If someone comments that you forgot to do something or if there is a bug in the code, you can fix it in your branch and push up the change. GitHub will show your new commits and any additional feedback you may receive in the unified Pull Request view.

    ###ProTip

    Pull Request comments are written in Markdown, so you can embed images and emoji, use pre-formatted text blocks, and other lightweight formatting.

    ## Merge to `master`

    Once your PR has passed any the integration tests and received approval to merge, it is time to merge your code into the `master` branch.

    Once merged, Pull Requests preserve a record of the historical changes to your code. Because they're searchable, they let anyone go back in time to understand why and how a decision was made.

    ###ProTip

    By incorporating certain keywords into the text of your Pull Request, you can associate issues with code. When your Pull Request is merged, the related issues are also closed. For example, entering the phrase Closes #32 would close issue number 32 in the repository. For more information, check out our help article.


  CN_BUILD_TASKS: |
    ## Build Tasks

    Command | Description
    :------ | :----------
    <% objectValues(readme.buildTask.app).concat(objectValues(readme.buildTask.build)).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); %>


  CN_COMMIT_TASKS: |
    ## Commit Tasks

    Command | Description
    :------ | :----------
    <pre>git status</pre> | Lists the current branch and the status of changed files
    <pre>git log</pre> | Displays the commit log (press Q to quit viewing)
    <pre>git add .</pre> | Stages all modified & untracked files, ready to be committed
    <% objectValues(readme.buildTask.commit).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); -%>
    <pre>git push</pre> | Push local repository changes to remote repository


  CN_RELEASE_TASKS: |
    ## Release Tasks

    Command | Description
    :------ | :----------
    <% objectValues(readme.buildTask.release).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); %>

  CN_TEST_TASKS: |
    ## Test Tasks

    Command | Description
    :------ | :----------
    <% objectValues(readme.buildTask.testUnit).concat(objectValues(readme.buildTask.testBrowser)).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); %>


  CN_VERIFY_TASKS: |
    ## Verification (Linting) Tasks

    Command | Description
    :------ | :----------
    <% objectValues(readme.buildTask.verify).forEach(function(value) {
    %><pre><%- value.command %></pre> | <%- value.description %><%
      if (value.features && value.features.length) {
        %><ul><% value.features.forEach(function(feature){%><li><%- feature %></li><%}) %></ul><%
      } %>
    <% }); %>


  CN_CHANGING_BUILD_TOOL_CONFIG: |
    ## Changing build-tool configuration

    There are 3 ways you can change the build-tool configuration for this project:

    1. BEST: Modify the Confit configuration file (<%= link(configFile) %>) by hand, then re-run `yo confit` and tell it to use the existing configuration.
    1. OK: Re-run `yo confit` and provide new answers to the questions. **Confit will attempt to overwrite your existing configuration (it will prompt for confirmation), so make sure you have committed your code to a source control (e.g. git) first**.
      There are certain configuration settings which can **only** be specified by hand, in which case the first approach is still best.
    1. RISKY: Modify the generated build-tool config by hand. Be aware that if you re-run `yo confit` it will attempt to overwrite your changes. So commit your changes to source control first.

    Additionally, the **currently-generated** configuration can be extended in the following ways:

    - The task configuration is defined in [package.json](package.json). It is possible to change the task definitions to add your own sub-tasks.
    You can also use the `pre...` and `post...` script-name prefixes to run commands before (pre) and after (post) the generated commands.

    <% objectValues(readme.extensionPoint).forEach(function(value) {
    %>- <%- value -%>

    <% }); %>


release: {}

sampleApp:
  demoDir: <%= paths.input.srcDir %>
  entryPointFileName:
    ES6: 'index.js'
    TypeScript: 'index.ts'

verify:
  codeToVerify:
    - configKey: jsCodingStandard
      codingStandardExpression: config.verify.jsCodingStandard

  jsCodingStandard:
    none:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - <<: *pkg_eslint
        - <<: *pkg_eslint-config-defaults
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint.yml
          dest: <%= paths.config.configDir %>verify/.eslintrc

    AirBnB:
      supportedSourceFormat: ['ES6']
      packages:
        - <<: *pkg_eslint
        - <<: *pkg_eslint-config-defaults
        - <<: *pkg_eslint-plugin-react
        - <<: *pkg_babel-eslint
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint.yml
          dest: <%= paths.config.configDir %>verify/.eslintrc

    Google:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - <<: *pkg_eslint
        - <<: *pkg_eslint-config-defaults
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint.yml
          dest: <%= paths.config.configDir %>verify/.eslintrc

    StandardJS:
      supportedSourceFormat: ['ES5', 'ES6']
      packages:
        - <<: *pkg_eslint-config-standard
        - <<: *pkg_eslint-plugin-standard
      templateFiles:
        - src: eslintignore.tpl
          dest: .eslintignore
        - src: eslint.yml
          dest: <%= paths.config.configDir %>verify/.eslintrc

    TypeScript:
      supportedSourceFormat: ['TypeScript']
      packages:
        - <<: *pkg_tslint
      templateFiles:
        - src: tslint.json
          dest: <%= paths.config.configDir %>verify/tslint.json
